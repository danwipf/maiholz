{"version":3,"sources":["components/Layout.js","components/XMLImport.js","pages/SettingsPage.js","pages/DashboardPage.js","App.js","reportWebVitals.js","index.js"],"names":["Layout","_ref","children","menuOpen","setMenuOpen","useState","React","createElement","Fragment","className","onClick","Link","to","XMLImport","onUpdate","style","marginTop","type","accept","onChange","event","file","target","files","reader","FileReader","onload","e","xml","DOMParser","parseFromString","result","get","tag","_xml$getElementsByTag","getElementsByTagName","textContent","updated","deviceIDSauna","deviceIDHotPot","token","baseURL","timestampoffset","key","value","Object","entries","localStorage","setItem","alert","readAsText","SettingsPage","setdeviceIDSauna","getItem","setdeviceHotPot","setToken","baseUrl","setBaseURL","settimestampoffset","navigate","useNavigate","onSubmit","preventDefault","placeholder","required","DashboardPage","deviceIdSauna","authKey","remainingTime","setRemainingTime","useEffect","timerInterval","fetchTime","async","response","fetch","data","json","shellyTime","device_status","unixtime","timerStarted","relays","timer_started","duration","timer_duration","clientTime","Math","floor","Date","now","remaining","max","error","console","setInterval","clearInterval","method","headers","body","URLSearchParams","id","auth_key","channel","turn","message","App","isLoggedIn","BrowserRouter","Routes","Route","path","element","Navigate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wMA0BeA,MAtBf,SAAeC,GAAgB,IAAf,SAAEC,GAAUD,EAC1B,MAAOE,EAAUC,GAAeC,oBAAS,GAEzC,OACEC,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAAA,UAAQE,UAAU,UAChBH,IAAAC,cAAA,MAAIE,UAAU,QAAO,SACrBH,IAAAC,cAAA,OAAKE,UAAU,cAAcC,QAASA,IAAMN,GAAaD,IAAW,UAGpEG,IAAAC,cAAA,OAAKE,UAAW,QAAON,EAAW,OAAS,KACzCG,IAAAC,cAACI,IAAI,CAACC,GAAG,IAAIF,QAASA,IAAMN,GAAY,IAAQ,WAChDE,IAAAC,cAACI,IAAI,CAACC,GAAG,aAAaF,QAASA,IAAMN,GAAY,IAAQ,eAG7DE,IAAAC,cAAA,QAAME,UAAU,gBACbP,KC2BQW,MA7CjB,SAAkBZ,GAAgB,IAAf,SAAEa,GAAUb,EAmC3B,OACEK,IAAAC,cAAA,OAAKQ,MAAO,CAAEC,UAAW,SACvBV,IAAAC,cAAA,aACED,IAAAC,cAAA,cAAQ,iCAAuC,IAC/CD,IAAAC,cAAA,SAAOU,KAAK,OAAOC,OAAO,OAAOC,SAtCbC,IACxB,MAAMC,EAAOD,EAAME,OAAOC,MAAM,GAChC,IAAKF,EAAM,OAEX,MAAMG,EAAS,IAAIC,WAEnBD,EAAOE,OAAUC,IACf,MACMC,GADS,IAAIC,WACAC,gBAAgBH,EAAEL,OAAOS,OAAQ,YAE9CC,EAAOC,IAAG,IAAAC,EAAA,OAAqC,QAAhCA,EAAAN,EAAIO,qBAAqBF,GAAK,UAAE,IAAAC,OAAA,EAAhCA,EAAkCE,cAAe,IAEhEC,EAAU,CACdC,cAAeN,EAAI,iBACnBO,eAAgBP,EAAI,kBACpBQ,MAAOR,EAAI,SACXS,QAAST,EAAI,WACbU,gBAAiBV,EAAI,oBAIvB,IAAK,MAAOW,EAAKC,KAAUC,OAAOC,QAAQT,GACxCU,aAAaC,QAAQL,EAAKC,GAI5B9B,EAASuB,GAETY,MAAM,iDAGRzB,EAAO0B,WAAW7B,SCiDT8B,MA5Ef,WACE,MAAOb,EAAec,GAAoB/C,mBAAS0C,aAAaM,QAAQ,kBAAoB,KACrFd,EAAgBe,GAAmBjD,mBAAS0C,aAAaM,QAAQ,mBAAqB,KACtFb,EAAOe,GAAYlD,mBAAS0C,aAAaM,QAAQ,UAAY,KAC7DG,EAASC,GAAcpD,mBAAS0C,aAAaM,QAAQ,YAAc,KACnEX,EAAiBgB,GAAsBrD,mBAAS0C,aAAaM,QAAQ,oBAAsB,IAE5FM,EAAWC,cAkBjB,OAEEtD,IAAAC,cAAA,OAAKE,UAAU,sBACbH,IAAAC,cAAA,QAAME,UAAU,eAAeoD,SAnBdlC,IACnBA,EAAEmC,iBACFf,aAAaC,QAAQ,gBAAiB,gBACtCD,aAAaC,QAAQ,iBAAkB,qBACvCD,aAAaC,QAAQ,QAASR,GAC9BO,aAAaC,QAAQ,UAAWQ,GAChCT,aAAaC,QAAQ,kBAAmB,MAExCI,EAAiB,gBACjBE,EAAgB,qBAChBI,EAAmB,MAEnBC,EAAS,gBAQLrD,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UAAI,UAAQwC,aAAaM,QAAQ,kBACjC/C,IAAAC,cAAA,UAAI,WAASwC,aAAaM,QAAQ,mBAElC/C,IAAAC,cAAA,UAAI,SACJD,IAAAC,cAAA,SACEU,KAAK,OACL8C,YAAY,QACZnB,MAAOJ,EACPrB,SAAWQ,GAAM4B,EAAS5B,EAAEL,OAAOsB,OACnCoB,UAAQ,IAEV1D,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SACEU,KAAK,OACL8C,YAAY,UACZnB,MAAOY,EACPrC,SAAWQ,GAAM8B,EAAW9B,EAAEL,OAAOsB,OACrCoB,UAAQ,IAEV1D,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SACEU,KAAK,OACL8C,YAAY,oBACZnB,MAAOF,EACPvB,SAAWQ,GAAM+B,EAAmB/B,EAAEL,OAAOsB,OAC7CoB,UAAQ,IAGV1D,IAAAC,cAACM,EAAS,CACRC,SAAUb,IAAyE,IAAxE,cAAEqC,EAAa,eAAEC,EAAc,MAAEC,EAAK,QAAEC,EAAO,gBAAEC,GAAiBzC,EAC3EmD,EAAiBd,GACjBgB,EAAgBf,GAChBgB,EAASf,GACTiB,EAAWhB,GACXiB,EAAmBhB,MAIvBpC,IAAAC,cAAA,UAAQU,KAAK,UAAS,gBCLfgD,MApEf,WACE,MAAMC,EAAgBnB,aAAaM,QAAQ,iBACrCc,EAAUpB,aAAaM,QAAQ,SAC/BG,EAAUT,aAAaM,QAAQ,WAC/BX,EAAkBK,aAAaM,QAAQ,oBAEtCe,EAAeC,GAAoBhE,mBAAS,MAgDnD,OA7BAiE,oBAAU,KACR,IAAIC,EAEJ,MAAMC,EAAYC,UAChB,IACE,MAAMC,QAAiBC,MAAM,GAAGnB,sBAA4BU,cAA0BC,KAChFS,QAAaF,EAASG,OAEtBC,EAAaF,EAAKA,KAAKG,cAAcC,SACrCC,EAAeL,EAAKA,KAAKG,cAAcG,OAAO,GAAGC,cACjDC,EAAWR,EAAKA,KAAKG,cAAcG,OAAO,GAAGG,eAE7CC,EAAaC,KAAKC,MAAMC,KAAKC,MAAM,KAGnCC,EAAaV,EAAeG,GAAaN,GAF5BQ,EAAaR,IAE0CpC,EAC1E2B,EAAiBkB,KAAKK,IAAI,EAAGD,IAC7B,MAAOE,GACPC,QAAQD,MAAM,gBAAiBA,GAC/BxB,EAAiB,YAOrB,OAHAG,IACAD,EAAgBwB,YAAYvB,EAAW,KAEhC,IAAMwB,cAAczB,IAC1B,CAACf,EAASU,EAAeC,IAG1B7D,IAAAC,cAAA,OAAKE,UAAU,sBACbH,IAAAC,cAAA,OAAKE,UAAU,gBACbH,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UAAQG,QAlDM+D,UAClB,UACQE,MAASnB,EAAH,wBAAmC,CAC7CyC,OAAQ,OACRC,QAAS,CAAE,eAAgB,qCAC3BC,KAAM,IAAIC,gBAAgB,CACxBC,GAAInC,EACJoC,SAAUnC,EACVoC,QAAS,EACTC,KAAM,aAGV,MAAOX,GACP5C,MAAM,mBAAqB4C,EAAMY,YAqCD,0BAC9BnG,IAAAC,cAAA,OAAKQ,MAAO,CAAEC,UAAW,SACvBV,IAAAC,cAAA,cAAQ,sBAA4B,IACV,kBAAlB6D,EAAgCA,EAAH,YAA8BA,MCzC9DsC,MAjBf,WAEE,MAAMC,EACJ5D,aAAaM,QAAQ,aAAeN,aAAaM,QAAQ,YAE3D,OACE/C,IAAAC,cAACqG,IAAa,KACZtG,IAAAC,cAACP,EAAM,KACLM,IAAAC,cAACsG,IAAM,KACLvG,IAAAC,cAACuG,IAAK,CAACC,KAAK,IAAIC,QAAS1G,IAAAC,cAAC4C,EAAY,QACtC7C,IAAAC,cAACuG,IAAK,CAACC,KAAK,aAAaC,QAASL,EAAarG,IAAAC,cAAC0D,EAAa,MAAM3D,IAAAC,cAAC0G,IAAQ,CAACrG,GAAG,oBCJ3EsG,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKpH,IAAkD,IAAjD,OAAEqH,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASzH,EACpEqH,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCADQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzH,IAAAC,cAACD,IAAM0H,WAAU,KACf1H,IAAAC,cAACmG,EAAG,QAIRQ,K","file":"static/js/main.ac3b6310.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Layout.css';\r\n\r\nfunction Layout({ children }) {\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <header className=\"header\">\r\n        <h1 className=\"logo\">Sauna</h1>\r\n        <div className=\"menu-toggle\" onClick={() => setMenuOpen(!menuOpen)}>\r\n          â˜°\r\n        </div>\r\n        <nav className={`nav ${menuOpen ? 'open' : ''}`}>\r\n          <Link to=\"/\" onClick={() => setMenuOpen(false)}>Setting</Link>\r\n          <Link to=\"/dashboard\" onClick={() => setMenuOpen(false)}>Dashboard</Link>\r\n        </nav>\r\n      </header>\r\n      <main className=\"main-content\">\r\n        {children}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\n\r\nfunction XMLImport({ onUpdate }) {\r\n    const handleFileChange = (event) => {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n  \r\n      const reader = new FileReader();\r\n  \r\n      reader.onload = (e) => {\r\n        const parser = new DOMParser();\r\n        const xml = parser.parseFromString(e.target.result, 'text/xml');\r\n  \r\n        const get = (tag) => xml.getElementsByTagName(tag)[0]?.textContent || '';\r\n  \r\n        const updated = {\r\n          deviceIDSauna: get('deviceIDSauna'),\r\n          deviceIDHotPot: get('deviceIDHotPot'),\r\n          token: get('token'),\r\n          baseURL: get('baseURL'),\r\n          timestampoffset: get('timestampoffset')\r\n        };\r\n  \r\n        // Speichern im localStorage\r\n        for (const [key, value] of Object.entries(updated)) {\r\n          localStorage.setItem(key, value);\r\n        }\r\n  \r\n        // States in SettingsPage aktualisieren\r\n        onUpdate(updated);\r\n  \r\n        alert('Einstellungen wurden erfolgreich importiert.');\r\n      };\r\n  \r\n      reader.readAsText(file);\r\n    };\r\n  \r\n    return (\r\n      <div style={{ marginTop: '1rem' }}>\r\n        <label>\r\n          <strong>Importiere XML-Einstellungen:</strong>{' '}\r\n          <input type=\"file\" accept=\".xml\" onChange={handleFileChange} />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default XMLImport;\r\n  ","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport XMLImport from '../components/XMLImport';\r\nimport '../index.css';\r\n\r\n\r\n\r\nfunction SettingsPage() {\r\n  const [deviceIDSauna, setdeviceIDSauna] = useState(localStorage.getItem('deviceIDSauna') || '');\r\n  const [deviceIDHotPot, setdeviceHotPot] = useState(localStorage.getItem('deviceIDHotPot') || '');\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [baseUrl, setBaseURL] = useState(localStorage.getItem('baseURL') || '');\r\n  const [timestampoffset, settimestampoffset] = useState(localStorage.getItem('timestampoffset') || \"\");\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    localStorage.setItem('deviceIDSauna', 'd8bfc01a555e');\r\n    localStorage.setItem('deviceIDHotPot', 'Nicht Installiert');\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('baseURL', baseUrl);\r\n    localStorage.setItem('timestampoffset', 7200)\r\n\r\n    setdeviceIDSauna('d8bfc01a555e');\r\n    setdeviceHotPot('Nicht Installiert');\r\n    settimestampoffset(7200);\r\n\r\n    navigate('/dashboard');\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"settings-container\">\r\n      <form className=\"settings-box\" onSubmit={handleLogin}>\r\n        <h1>Setting</h1>\r\n        <h3>Shelly DeviceID</h3>\r\n        <h2>Sauna: {localStorage.getItem('deviceIDSauna')}</h2>\r\n        <h2>HotPot: {localStorage.getItem('deviceIDHotPot')}</h2>\r\n\r\n        <h3>Token</h3>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Token\"\r\n          value={token}\r\n          onChange={(e) => setToken(e.target.value)}\r\n          required\r\n        />\r\n        <h3>BaseURL</h3>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"BaseURL\"\r\n          value={baseUrl}\r\n          onChange={(e) => setBaseURL(e.target.value)}\r\n          required\r\n        />\r\n        <h3>Time Stamp Offset</h3>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Time Stamp Offset\"\r\n          value={timestampoffset}\r\n          onChange={(e) => settimestampoffset(e.target.value)}\r\n          required\r\n        />\r\n        \r\n        <XMLImport\r\n          onUpdate={({ deviceIDSauna, deviceIDHotPot, token, baseURL, timestampoffset }) => {\r\n            setdeviceIDSauna(deviceIDSauna);\r\n            setdeviceHotPot(deviceIDHotPot);\r\n            setToken(token);\r\n            setBaseURL(baseURL);\r\n            settimestampoffset(timestampoffset);\r\n          }}\r\n        />\r\n\r\n        <button type=\"submit\">Speichern</button>\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../index.css';\r\n\r\nfunction DashboardPage() {\r\n  const deviceIdSauna = localStorage.getItem('deviceIDSauna');\r\n  const authKey = localStorage.getItem('token');\r\n  const baseUrl = localStorage.getItem('baseURL');\r\n  const timestampoffset = localStorage.getItem('timestampoffset');\r\n\r\n  const [remainingTime, setRemainingTime] = useState(null);\r\n\r\n  const toggleSauna = async () => {\r\n    try {\r\n      await fetch(`${baseUrl}/device/relay/control`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n        body: new URLSearchParams({\r\n          id: deviceIdSauna,\r\n          auth_key: authKey,\r\n          channel: 0,\r\n          turn: 'toggle',\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      alert('Netzwerkfehler: ' + error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timerInterval;\r\n\r\n    const fetchTime = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/device/status?id=${deviceIdSauna}&auth_key=${authKey}`);\r\n        const data = await response.json();\r\n\r\n        const shellyTime = data.data.device_status.unixtime;\r\n        const timerStarted = data.data.device_status.relays[0].timer_started;\r\n        const duration = data.data.device_status.relays[0].timer_duration;\r\n\r\n        const clientTime = Math.floor(Date.now()/1000); // lokale Zeit in Sek.\r\n        const timeOffset = clientTime - shellyTime;\r\n\r\n        const remaining = (timerStarted + duration) - (shellyTime + timeOffset) - timestampoffset;\r\n        setRemainingTime(Math.max(0, remaining));\r\n      } catch (error) {\r\n        console.error('Timer Fehler:', error);\r\n        setRemainingTime('Fehler');\r\n      }\r\n    };\r\n\r\n    fetchTime();\r\n    timerInterval = setInterval(fetchTime, 1000); // Jede Sekunde aktualisieren\r\n\r\n    return () => clearInterval(timerInterval);\r\n  }, [baseUrl, deviceIdSauna, authKey]);\r\n\r\n  return (\r\n    <div className=\"settings-container\">\r\n      <div className=\"settings-box\">\r\n        <h1>Dashboard</h1>\r\n        <button onClick={toggleSauna}>Sauna ein-/ausschalten</button>\r\n        <div style={{ marginTop: '1rem' }}>\r\n          <strong>Verbleibende Zeit:</strong>{' '}\r\n          {typeof remainingTime === 'number' ? `${remainingTime} Sekunden` : remainingTime}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardPage;\r\n","import React from 'react';\r\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\r\nimport Layout from './components/Layout';\r\nimport SettingsPage from './pages/SettingsPage';\r\nimport DashboardPage from './pages/DashboardPage';\r\n\r\nfunction App() {\r\n\r\n  const isLoggedIn =\r\n    localStorage.getItem('username') && localStorage.getItem('password');\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Layout>\r\n        <Routes>\r\n          <Route path=\"/\" element={<SettingsPage />} />\r\n          <Route path=\"/dashboard\" element={isLoggedIn ? <DashboardPage /> : <Navigate to=\"/settings\" />} />\r\n        </Routes>\r\n      </Layout>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// src/index.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}